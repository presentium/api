# This Docker compose file creates the local environment needed to run the API
# without having to install the dependencies on your machine.
#
# No need to start it manually! When running in a Gradle-developer environment,
# Spring will automatically start the services defined in this file.
services:
  postgres:
    image: 'postgres:latest'
    ports:
      - '15432:5432'
    environment:
      - 'POSTGRES_DB=presentium'
      - 'POSTGRES_USER=presentium'
      - 'POSTGRES_PASSWORD=presentium'
    volumes:
      - 'postgres-data:/var/lib/postgresql/data'
  vault:
    image: 'hashicorp/vault:1.17.3'
    ports:
      - '18200:8200'
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: 'presentium-root'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
    cap_add:
      - IPC_LOCK
    entrypoint: >-
      vault server -dev
  vault-init:
    build:
      context: .
      dockerfile: src/test/resources/docker/vault-init.Dockerfile
    depends_on:
      - vault
    environment:
      VAULT_ADDR: 'http://vault:8200'
      VAULT_TOKEN: 'presentium-root'
    volumes:
      - './src/test/resources/docker/vault:/config'
    command:
      - 'sh'
      - '-c'
      - >-
        sleep 3 &&
        cd /config &&
        sh init.sh
  oidc:
    image: ghcr.io/navikt/mock-oauth2-server:2.1.8
    ports:
      - '17580:17580'
    labels:
      org.springframework.boot.ignore: true
    volumes:
      - './src/test/resources/mock-oidc:/config'
    environment:
      SERVER_PORT: 17580
      # language=JSON
      JSON_CONFIG: |-
        {
          "interactiveLogin": "true",
          "loginPagePath": "/config/mock-oidc-login.html",
          "rotateRefreshToken": "true",
          "tokenCallbacks": [
            {
              "issuerId": "presentium",
              "requestMappings": []
            }
          ]
        }

volumes:
  postgres-data:
