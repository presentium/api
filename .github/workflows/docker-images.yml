name: Continuous Delivery > Docker build and deployment triggers

on:
  push:
    branches: [ 'main' ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Retrieve tags
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Set output variables
        id: check
        run: |
          tag=""
          if [[ "${{ github.ref }}" == refs/heads/* ]]; then
            tag="$(git tag --points-at HEAD)"
          fi
          echo "head_tag=${tag}" >> $GITHUB_OUTPUT

    outputs:
      head_tag: ${{ steps.check.outputs.head_tag }}

  build-docker:
    name: Build and attest Docker image with JIB
    runs-on: ubuntu-latest
    needs: [ prepare ]
    if: "github.event_name == 'push' && needs.prepare.outputs.head_tag == ''"

    permissions:
      contents: read
      id-token: write
      attestations: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Java env 🏗
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          check-latest: true

      - name: Setup Gradle 🪓
        uses: gradle/actions/setup-gradle@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image 🐳
        id: push
        run: |
          if [ "${{startsWith(github.ref, 'refs/tags/v')}}" = "true" ]; then
            ./gradlew :processResources :jib -Djib.to.tags=latest -Djib.console=plain
          else
            ./gradlew :processResources :jib -Djib.console=plain
          fi

          echo "version=$(./gradlew -q printVersion)" >> "$GITHUB_OUTPUT"
          echo "digest=$(cat build/jib-image.digest)" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/presentium/api
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

    outputs:
      version: ${{ steps.push.outputs.version }}

  update-deployments:
    name: Publish commits
    runs-on: ubuntu-latest
    needs: [ build-docker ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
          ref: main

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_tag_gpgsign: true
          git_commit_gpgsign: true

      - name: Update staging tag
        run: yq e -i '.image.tag = "${{ needs.build-docker.outputs.version }}"' kubernetes/values-staging.yaml

      - name: Update production tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: yq e -i '.image.tag = "${{ needs.build-docker.outputs.version }}"' kubernetes/values-prod.yaml

      - name: Publish edits
        run: |
          git add kubernetes/values-staging.yaml
          git add kubernetes/values-prod.yaml
          git diff-index --quiet HEAD || git commit -m "chore(release): update image tags [skip ci]"
          git push origin main
